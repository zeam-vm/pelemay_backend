# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# CI 

name: Elixir CI

on:
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - '**/*.md'
      - '*.cff'
      - 'LICENSE*'
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build:

    name: Build and test on ${{ matrix.working-directory }}, ${{ matrix.os }}, ${{ matrix.elixir-version }}, ${{ matrix.otp-version }}
    runs-on: ${{ matrix.os }}
    env:
      ASDF_VERSION: 'v0.11.3'

    strategy:
      fail-fast: false
      matrix:
        working-directory: ["pelemay_backend"]
        os: [ubuntu-20.04, ubuntu-22.04, windows-2022, macos-13, macos-12]
        otp-version: ['24.3.4.11', '25.3.2', '26.0']
        elixir-version: ['1.14.4']
        exclude:
          - os: Ubuntu-22.04
            otp-version: '26.0'
          - os: windows-2022
            otp-version: '25.3.2'
          - os: windows-2022
            otp-version: '26.0'
          - os: macos-13
            otp-version: '24.3.4.11'
          - os: macos-13
            otp-version: '26.0'
          - os: macos-12
            otp-version: '24.3.4.11'
          - os: macos-12
            otp-version: '26.0'
    defaults:
      run:
        working-directory: ${{ matrix.working-directory }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir (Ubuntu, Windows)
      if: ${{ !startsWith(runner.os, 'macos') }}
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir-version }}
        otp-version: ${{ matrix.otp-version }}
    - name: Restore .asdf
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/.asdf
        key: ${{ runner.os }}-${{ env.ASDF_VERSION }}
        restore-keys: ${{ runner.os }}-${{ env.ASDF_VERSION }}
    - name: Set up Elixir (macOS)
      if: ${{ startsWith(runner.os, 'macos') }}
      run: |
        brew install coreutils curl git
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch ${{ env.ASDF_VERSION }}
        echo '. "$HOME/.asdf/asdf.sh"' >> ${{ github.workspace }}/.zshrc
        source ${{ github.workspace }}/.zshrc
        asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
        brew install wxwidgets openjdk fop openssl@3
        echo 'export PATH="$(brew --prefix openjdk)/bin:$PATH"' >> ${{ github.workspace }}/.zshrc
        source ${{ github.workspace }}/.zshrc
        export CC="/usr/bin/gcc -I$(brew --prefix unixodbc)/include" LDFLAGS=-L$(brew --prefix unixodbc)/lib
        echo ${{ matrix.otp-version }} | sed -e "s/^\([^\.]*\)\.\(.*\)$/\1/" | read -d '' OTP_MAJOR_VERSION
        echo ${{ matrix.otp-version }} | sed -e "s/^\([^\.]*\)\.\([^\.]*\).*$/\2/" | read -d '' OTP_MINOR_VERSION
        if [ "$OTP_MAJOR_VERSION" -eq 25 ]; then 
          if [ "$OTP_MINOR_VERSION" -ge 1 ]; then
            export KERL_CONFIGURE_OPTIONS="--with-ssl=$(brew --prefix openssl@3) --with-odbc=$(brew --prefix unixodbc)"
          else
            export KERL_CONFIGURE_OPTIONS="--with-ssl=$(brew --prefix openssl@1.1) --with-odbc=$(brew --prefix unixodbc)"
          fi
        elif [ "$OTP_MAJOR_VERSION" -ge 26 ]; then
          export KERL_CONFIGURE_OPTIONS="--with-ssl=$(brew --prefix openssl@3) --with-odbc=$(brew --prefix unixodbc)"
        else
          export KERL_CONFIGURE_OPTIONS="--with-ssl=$(brew --prefix openssl@1.1) --with-odbc=$(brew --prefix unixodbc)"
        fi
        asdf install erlang ${{ matrix.otp-version }}
        asdf global erlang ${{ matrix.otp-version }}
        export ELIXIR_VERSION="${{ matrix.elixir-version }}-otp-$OTP_MAJOR_VERSION"
        asdf install elixir $ELIXIR_VERSION
        asdf global elixir $ELIXIR_VERSION
        mix local.hex --force
        mix local.rebar --force
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/${{ matrix.working-directory }}/deps
        key: ${{ runner.os }}-Elixir-v${{ matrix.elixir-version }}-OTP-${{ matrix.otp-version }}-${{ hashFiles(format('{0}/{1}/mix.lock', github.workspace, matrix.working-directory)) }}
        restore-keys: ${{ runner.os }}-Elixir-v${{ matrix.elixir-version }}-OTP-${{ matrix.otp-version }}-
    - name: Install dependencies
      run: mix deps.get
    - name: Compile and check warning
      run: mix compile --warnings-as-errors
    - name: Check formatting
      if: ${{ !startsWith(runner.os, 'windows') }}
      run: mix format --check-formatted
    - name: Run tests
      run: mix test
